# Install_gitlab - GitLab Installation Helper
# Prepare all the stuff excepted the configuration files
# 1. Launch the script
# 2. Modify the configuration files as suggested
# 3. Launch again the script
#
# 18/06/2014 - oloc - Version 0.3 - Use of a temporary file for sql statement in order to set values
# 18/06/2014 - oloc - Version 0.2 - Force the usage of sudo
# 13/06/2014 - oloc - First version

Name=gitlab
User=${Name}
InstDir=/opt
MysqlPwdRoot=lqsym
MysqlPwdUser=baltig
LogDir=/var/log
LogFile=${LogDir}/${Name}.$(date +%Y%m%d.%H%M%S).log

if [ $USER != 'root' ] ; then
	echo "Please use sudo or root account."
	exit
fi

###########
# Functions
_echo() {
echo "$(date +%Y%m%d-%H%M%S) - $1" | tee -a ${LogFile}
}

_log() {
echo "$(date +%Y%m%d-%H%M%S) * $1" >> ${LogFile}
}

###################
# Start annoucement
_log "${Name} - start."
_log "Log is here: ${LogFile}"

if [ ! -a /tmp/${Name}.flag ] ; then

###################
_echo "Creation of user ${User}"
adduser --disabled-login --gecos 'GitLab' ${User}
mkdir ${LogDir}/${Name} && sudo chown ${User}:${User} ${LogDir}/${Name}

###################
_echo "Installation of the prerequisites..."
apt-get update -y && sudo apt-get upgrade -y
apt-get install -y build-essential zlib1g-dev libyaml-dev libssl-dev libgdbm-dev libreadline-dev libncurses5-dev libffi-dev curl openssh-server redis-server checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev logrotate 2>&1 | tee -a ${LogFile}
apt-get install -y git-core 2>&1 | tee -a ${LogFile}

###################
_log "$(python2 --version)"
if [ "$(python2 --version)" != "Python 2.7.3" ] ; then
	_echo "Installation of python..."
	apt-get install -y python    2>&1 | tee -a ${LogFile}
	apt-get install -y python2.7 2>&1 | tee -a ${LogFile}
	ln -s /usr/bin/python /usr/bin/python2
fi
apt-get install -y python-docutils 2>&1 | tee -a ${LogFile}

###################
_echo "Installation of Ruby..."
mkdir /tmp/ruby && cd /tmp/ruby
#curl --progress https://ftp.ruby-lang.org/pub/ruby/stable-snapshot.tar.gz | tar xz
curl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p481.tar.gz | tar xz
_log "$(ls -l ruby*)"
cd ruby*
./configure --disable-install-rdoc 2>&1 | tee -a ${LogFile}
make 2>&1 | tee -a ${LogFile}
make install 2>&1 | tee -a ${LogFile}
gem install bundler --no-ri --no-rdoc 2>&1 | tee -a ${LogFile}

###################
_echo "Installation of the shell gitlab..."
cd ${InstDir}
sudo -u ${User} -H git clone https://github.com/gitlabhq/gitlab-shell.git -b v1.9.0
cd gitlab-shell
sudo -u ${User} -H cp config.yml.example config.yml

###################
_echo "Installation of Mysql..."
export DEBIAN_FRONTEND=noninteractive
apt-get install -q -y mysql-server mysql-client libmysqlclient-dev 2>&1 | tee -a ${LogFile}
sleep 3
cat > /tmp/mysql.inst  <<EOSQL
"UPDATE mysql.user SET Password=PASSWORD('${MysqlPwdRoot}') WHERE User='root';
FLUSH PRIVILEGES;"
CREATE USER '${User}'@'localhost' IDENTIFIED BY '${MysqlPwdUser}';
SET storage_engine=INNODB;
CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;
GRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO '${User}'@'localhost';
quit;
EOSQL
_log "SQL Statement to run :"
cat /tmp/mysql.inst >> ${LogFile}
mysql -uroot </tmp/mysql.inst
#mysql_secure_installation 2>&1 | tee -a ${LogFile}

###################
_echo "Installation of GitLab..."
cd $InstDir
sudo -u ${User} -H git clone https://github.com/gitlabhq/gitlabhq.git -b 6-4-stable ${Name}
cd ${InstDir}/${Name}
sudo -u ${User} -H mkdir tmp/pids/      && sudo chmod -R u+rwX  tmp/pids/
sudo -u ${User} -H mkdir tmp/sockets/   && sudo chmod -R u+rwX  tmp/sockets/
sudo -u ${User} -H mkdir public/uploads && sudo chmod -R u+rwX  public/uploads
sudo -u ${User} -H mv log log.old       && sudo -u ${User} -H ln -s /var/log/${Name}/ log
sudo -u ${User} -H mkdir $InstDir/gitlab-satellites
sudo -u ${User} -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb
sudo -u ${User} -H cp config/gitlab.yml.example config/gitlab.yml
sudo -u ${User} -H cp config/unicorn.rb.example config/unicorn.rb
sudo -u ${User} -H cp config/database.yml.mysql config/database.yml
sudo -u ${User} -H chmod o-rwx config/database.yml

###################
_echo "Installation of Nginx..."
apt-get install -y nginx
cp lib/support/nginx/gitlab /etc/nginx/sites-available/gitlab
ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/gitlab

_echo "****************************************************************************"
_echo "*** You have to modify the configuration of :"
_echo "${InstDir}/gitlab-shell/config.yml"
_echo "${InstDir}/${Name}/gitlab.yml"
_echo "${InstDir}/${Name}/unicorn.rb"
_echo "${InstDir}/${Name}/database.yml"
_echo "/etc/nginx/sites-enabled/gitlab"
_echo "Then rerun the script (or delete the flag /tmp/${Name}.flag ) "
_echo "****************************************************************************"

touch /tmp/${Name}.flag

else

###################
_echo "Gitlab deploiement..."
sudo -u ${User} -H bundle install --deployment --without development test postgres aws
sudo -u ${User} -H bundle exec rake gitlab:setup RAILS_ENV=production
cp lib/support/init.d/gitlab /etc/init.d/gitlab
chmod +x /etc/init.d/gitlab
update-rc.d gitlab defaults 21
cp lib/support/logrotate/${Name} /etc/logrotate.d/${Name}

###################
_echo "Starting..."
service gitlab start
service nginx restart
_echo "Status:"
sudo -u ${User} -H bundle exec rake gitlab:check RAILS_ENV=production
_echo "On your web browser try the login : admin@local.host and password : 5iveL!fe"
_echo "****************************************************************************"

rm /tmp/${Name}.flag 2>/dev/null
fi
